module test_integrate
    use potential_type, only: Potential_t, Potential_Harmonic_t
    use integrate, only: numerov_thijssen, numerov
    use precision, only: rp
    use constants, only: pi
    use funit
    implicit none
    ! TODO have tolerances depend on the precision (right now fails only for real32)

    ! note: you must go to Testing/Temporary/LastTest.log to get useful output
    ! or do ctest --output-on-failure

    ! maybe make a tolerance parameter here based on rp

 contains

    ! The following procedure will be called before running
   ! each test in the suite.
 @before
 subroutine set_up()
    ! type(Harmonic_Potential_t) :: hpot
 end subroutine set_up

 ! The following procedure will be called after running
 ! each test in the suite.
 @after
 subroutine tear_down()
    ! integer :: unit
    ! logical :: exists

    ! inquire(file='test.txt', number=unit, exist=exists)
    ! if (unit /= -1) then
    !    close(unit, status='delete')
    ! elseif (exists) then
    !    open(newunit=unit, file='test.txt')
    !    close(unit, status='delete')
    ! end if

 end subroutine tear_down

    !!! Note: no test annotation !!!
    subroutine not_a_test()
       print*,'this procedure should not be called'
    end subroutine not_a_test


    @test
    subroutine test_assert_true_and_false()
       @assertTrue(1 == 1)
       @assertFalse(1 == 2)
    end subroutine test_assert_true_and_false

    @test
    subroutine test_numerov_against_thijssen_harmonic()
        ! tests my Numerov implementation against Thijssen's implementation
        real(rp) :: energy=3.0
        real(rp) :: hstep = 0.02, maxDist=4.0
        integer :: secMaxI, maxI, l=0
        integer, parameter :: maxSol=60000 ! seems a tad high?? use allocatable arrays
        real(rp) :: r(maxSol), FArr(maxSol), phi1, phi2, solution(maxSol)
        real(rp) :: K
        real(rp) :: quartWave, secR
        real(rp) :: startPt=0.0, startVal, nextVal, nextPt ! I think..
        real(rp) :: endpt1, endval1, endpt2, endval2
        integer :: i
        real(rp) :: phiend1, phiend2, r1_thij, r2_thij
        real(rp) :: A, tmp, rcurr
        real(rp), allocatable :: sols(:)

        type(Potential_Harmonic_t) :: pot
        pot = Potential_Harmonic_t() ! constructor unnecessary in this case
        maxI = nint((maxDist-startPt)/hstep)
        K = sqrt(energy)
        quartWave = 0.5D0*PI/K
        secR = maxDist + quartWave
        secMaxI = int((secR-startPt)/hstep)
        r = [((i-1)*hstep, i=1, secMaxI+1)]
        FArr = harmonicF(r, energy)
        startVal = 0 ! how could this possibly be the value at r=0?? n=1 I guess
        nextVal = hstep
        nextPt = hstep
        call numerov_thijssen(hstep, 1, secMaxI+1, maxSol, FArr, .false., startVal, nextVal, solution)
        phiend1 = solution(maxI+1)
        phiend2 = solution(secMaxI+1)
        r1_thij = r(maxI+1)
        r2_thij = r(secMaxI+1)
        call numerov(pot, startPt, startVal, nextPt, nextVal, l, energy, maxI, &
        &    endpt1, endval1, endpt2, endval2, quartWave, sols)
        ! print*, "r1", r1_thij, startPt
        ! print*, "phiend1", phiend1, startVal
        ! print*, "sol_thij", solution(1:maxI+1)
        ! print*, "sol_mine", sols
        @assertEqual(r1_thij, endPt1, tolerance=1.e-8_rp)
        @assertEqual(phiend1, endVal1, tolerance=1.e-8_rp)
        @assertEqual(r2_thij, endPt2, tolerance=1.e-8_rp, message='very last point')
        @assertEqual(phiend2, endVal2, tolerance=1.e-8_rp)
    end subroutine test_numerov_against_thijssen_harmonic

    ! pure real(rp) function harmonic_sol(r,h) result(retval)
    ! real(rp), intent(in) :: r,h
    ! retval = r * exp(-r*r/2) * exp(h*h/2)
    ! end function harmonic_sol
    pure elemental real(rp) function harmonicF(r, energy) result(V_eff)
        implicit none
        !! helper function for numerov_thijssen
        !! returns the RHS of the radial Schroedinger equation, called F in
        !! equation 2.10 in Thijssen
        !! note this is actually 2*m/hbar^2 * F but at least for now the prefactor
        !! is unity
        ! class(Potential_t), intent(in) :: pot
        ! integer, intent(in) :: l ! assume = 0
        ! no alpha, assume harmonic
        real(rp), intent(in) :: r, energy

        ! V_eff = 2*r*r - energy
        V_eff = r*r-energy !*2.

    end function harmonicF
 end module test_integrate
